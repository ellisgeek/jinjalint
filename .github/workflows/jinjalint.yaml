name: jinjalint CI

on:
  workflow_dispatch:
  push:
    paths:
      - '**.j2'
      - .github/workflows/jinjalint.yaml

env:
  cache-version: v1
  POETRY_VERSION: 1.1.11

jobs:
  install:
    runs-on: ubuntu-latest
    container: python:3.7
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
    - name: Cache Poetry virtualenv
      uses: actions/cache@v2
      id: cache
      with:
        path: ~/.virtualenvs
        key: ${{ env.cache-version }}-${{ runner.os }}-poetry-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ env.cache-version }}-${{ runner.os }}-poetry-${{ hashFiles('pyproject.toml') }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry==${{ env.POETRY_VERSION }}
        poetry config virtualenvs.in-project false
        poetry config virtualenvs.path ~/.virtualenvs
        poetry install
      if: steps.cache.outputs.cache-hit != 'true'

  lint:
    needs: install
    runs-on: ubuntu-latest
    container: python:3.7
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
    - name: Cache Poetry virtualenv
      uses: actions/cache@v2
      id: cache
      with:
        path: ~/.virtualenvs
        key: ${{ env.cache-version }}-${{ runner.os }}-poetry-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ env.cache-version }}-${{ runner.os }}-poetry-${{ hashFiles('pyproject.toml') }}
    - name: Set Poetry config
      run: |
        python -m pip install --upgrade pip
        pip install poetry==${{ env.POETRY_VERSION }}
        poetry config virtualenvs.in-project false
        poetry config virtualenvs.path ~/.virtualenvs
    - name: Assert cache existence
      run: exit 1
      if: steps.cache.outputs.cache-hit != 'true'
    - name: Lint
      shell: bash
      run: |
        make lint

  test:
    needs: lint
    runs-on: ubuntu-latest
    container: python:3.7
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
    - name: Cache Poetry virtualenv
      uses: actions/cache@v2
      id: cache
      with:
        path: ~/.virtualenvs
        key: ${{ env.cache-version }}-${{ runner.os }}-poetry-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ env.cache-version }}-${{ runner.os }}-poetry-${{ hashFiles('pyproject.toml') }}
    - name: Set Poetry config
      run: |
        python -m pip install --upgrade pip
        pip install poetry==${{ env.POETRY_VERSION }}
        poetry config virtualenvs.in-project false
        poetry config virtualenvs.path ~/.virtualenvs
    - name: Assert cache existence
      run: exit 1
      if: steps.cache.outputs.cache-hit != 'true'
    - name: Run tests
      shell: bash
      run: |
        make test
